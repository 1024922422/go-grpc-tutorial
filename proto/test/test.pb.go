// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Request
	Response
	Test
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Status 枚举状态
type Test_Status int32

const (
	Test_OK   Test_Status = 0
	Test_FAIL Test_Status = 1
)

var Test_Status_name = map[int32]string{
	0: "OK",
	1: "FAIL",
}
var Test_Status_value = map[string]int32{
	"OK":   0,
	"FAIL": 1,
}

func (x Test_Status) String() string {
	return proto.EnumName(Test_Status_name, int32(x))
}
func (Test_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Request 请求结构
type Request struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Response 响应结构
type Response struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Test 测试
type Test struct {
	Age    int32       `protobuf:"varint,1,opt,name=age" json:"age,omitempty"`
	Count  int64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Money  float64     `protobuf:"fixed64,3,opt,name=money" json:"money,omitempty"`
	Score  float32     `protobuf:"fixed32,4,opt,name=score" json:"score,omitempty"`
	Name   string      `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Fat    bool        `protobuf:"varint,6,opt,name=fat" json:"fat,omitempty"`
	Char   []byte      `protobuf:"bytes,7,opt,name=char,proto3" json:"char,omitempty"`
	Status Test_Status `protobuf:"varint,8,opt,name=status,enum=test.Test_Status" json:"status,omitempty"`
	Child  *Test_Child `protobuf:"bytes,9,opt,name=child" json:"child,omitempty"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Test) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Test) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Test) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *Test) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Test) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Test) GetFat() bool {
	if m != nil {
		return m.Fat
	}
	return false
}

func (m *Test) GetChar() []byte {
	if m != nil {
		return m.Char
	}
	return nil
}

func (m *Test) GetStatus() Test_Status {
	if m != nil {
		return m.Status
	}
	return Test_OK
}

func (m *Test) GetChild() *Test_Child {
	if m != nil {
		return m.Child
	}
	return nil
}

// Child 子结构
type Test_Child struct {
	Sex string `protobuf:"bytes,1,opt,name=sex" json:"sex,omitempty"`
}

func (m *Test_Child) Reset()                    { *m = Test_Child{} }
func (m *Test_Child) String() string            { return proto.CompactTextString(m) }
func (*Test_Child) ProtoMessage()               {}
func (*Test_Child) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Test_Child) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "test.Request")
	proto.RegisterType((*Response)(nil), "test.Response")
	proto.RegisterType((*Test)(nil), "test.Test")
	proto.RegisterType((*Test_Child)(nil), "test.Test.Child")
	proto.RegisterEnum("test.Test_Status", Test_Status_name, Test_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	// Test 测试方法
	Test(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Test(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/test.TestService/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	// Test 测试方法
	Test(context.Context, *Request) (*Response, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Test(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _TestService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xd1, 0x4b, 0xc3, 0x30,
	0x10, 0xc6, 0x97, 0xae, 0xed, 0xba, 0x9b, 0x8e, 0x1a, 0x7c, 0x88, 0x03, 0x21, 0x14, 0xd1, 0xf8,
	0xb2, 0x87, 0x09, 0xbe, 0xab, 0x20, 0x88, 0x82, 0x90, 0xf9, 0xe4, 0x5b, 0xad, 0xa7, 0x1b, 0xb8,
	0x66, 0x36, 0xa9, 0xe8, 0x3f, 0xe3, 0xdf, 0x2a, 0x97, 0xb4, 0xea, 0xdb, 0xf7, 0xbb, 0xfb, 0xb8,
	0x7c, 0xb9, 0x03, 0x70, 0x68, 0xdd, 0x7c, 0xdb, 0x18, 0x67, 0x78, 0x4c, 0xba, 0x38, 0x84, 0x91,
	0xc6, 0xf7, 0x16, 0xad, 0xe3, 0x1c, 0xe2, 0xba, 0xdc, 0xa0, 0x60, 0x92, 0xa9, 0xb1, 0xf6, 0xba,
	0x38, 0x82, 0x4c, 0xa3, 0xdd, 0x9a, 0xda, 0x22, 0x17, 0x30, 0xda, 0xa0, 0xb5, 0xe5, 0x6b, 0x6f,
	0xe9, 0xb1, 0xf8, 0x8e, 0x20, 0x7e, 0xa0, 0x11, 0x39, 0x0c, 0xfb, 0x76, 0xa2, 0x49, 0xf2, 0x7d,
	0x48, 0x2a, 0xd3, 0xd6, 0x4e, 0x44, 0x92, 0xa9, 0xa1, 0x0e, 0x40, 0xd5, 0x8d, 0xa9, 0xf1, 0x4b,
	0x0c, 0x25, 0x53, 0x4c, 0x07, 0xa0, 0xaa, 0xad, 0x4c, 0x83, 0x22, 0x96, 0x4c, 0x45, 0x3a, 0xc0,
	0x6f, 0xac, 0xe4, 0x2f, 0x16, 0xbd, 0xf3, 0x52, 0x3a, 0x91, 0x4a, 0xa6, 0x32, 0x4d, 0x92, 0x5c,
	0xd5, 0xaa, 0x6c, 0xc4, 0x48, 0x32, 0xb5, 0xa3, 0xbd, 0xe6, 0xa7, 0x90, 0x5a, 0x57, 0xba, 0xd6,
	0x8a, 0x4c, 0x32, 0x35, 0x5d, 0xec, 0xcd, 0xfd, 0xf7, 0x29, 0xe9, 0x7c, 0xe9, 0x1b, 0xba, 0x33,
	0xf0, 0x63, 0x48, 0xaa, 0xd5, 0xfa, 0xed, 0x59, 0x8c, 0x25, 0x53, 0x93, 0x45, 0xfe, 0xcf, 0x79,
	0x45, 0x75, 0x1d, 0xda, 0xb3, 0x03, 0x48, 0x3c, 0x53, 0x02, 0x8b, 0x9f, 0xdd, 0x22, 0x48, 0x16,
	0x33, 0x48, 0xc3, 0x50, 0x9e, 0x42, 0x74, 0x7f, 0x9b, 0x0f, 0x78, 0x06, 0xf1, 0xf5, 0xc5, 0xcd,
	0x5d, 0xce, 0x16, 0xe7, 0x30, 0xa1, 0x59, 0x4b, 0x6c, 0x3e, 0xd6, 0x15, 0xf2, 0x93, 0x6e, 0x5d,
	0xbb, 0xe1, 0x99, 0xee, 0x00, 0xb3, 0x69, 0x8f, 0x61, 0xe1, 0xc5, 0xe0, 0x32, 0x7d, 0xf4, 0x57,
	0x7a, 0x4a, 0xfd, 0xc9, 0xce, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x52, 0xad, 0xae, 0xc0,
	0x01, 0x00, 0x00,
}
